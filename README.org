#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* Packages to add or look into
- moom
- telephone-line
- org-download
- spelling stuff
- eyebrowse
- smart-jump
- deadgrep
- rg
- diff-hl
- YCMD maybe for emacs and header file completions
- god mode
- mbsync
- popup-kill-ring
- discover-my-major
- treemacs (treemacs-magit, projectile)
- amx
- mathewZMD
- ivy-omni-org
- ivy-explorer
- ivy-rich
- cloud-theme
- general.el
- focus mode
- multiple cursors again
- ranger /deer 
* repos
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

#+END_SRC


* interface tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)

    (setenv "BROWSER" "firefox")t

    (use-package parchment-theme :ensure t)
    (use-package cloud-theme :ensure t)
    (use-package moe-theme :ensure t)
    (use-package zenburn-theme :ensure t)
    (use-package monokai-theme :ensure t)
    (use-package gruvbox-theme :ensure t)
    (use-package ample-theme :ensure t)
    (use-package ample-zen-theme :ensure t)
    (use-package alect-themes :ensure t)
    (use-package tao-theme :ensure t)
    (use-package poet-theme :ensure t)
    (use-package modus-operandi-theme :ensure t)
    (use-package modus-vivendi-theme :ensure t)
    (use-package faff-theme :ensure t)
    (use-package color-theme-modern :ensure t)
    (load-theme 'modus-operandi t)

    (use-package doom-modeline
      :ensure t)
    (doom-modeline-init)


    ;; expand the marked region in semantic increments
    ;;(negative prefix to reduce region)
    (use-package expand-region
      :ensure t
      :config 
      (global-set-key (kbd "C-=") 'er/expand-region))

    (setq save-interprogram-paste-before-kill t)

    (use-package hungry-delete
      :ensure t
      :config
      (global-hungry-delete-mode))

    (global-auto-revert-mode 1) ;; you might not want this
    (setq auto-revert-verbose nil) ;; or this
    (global-set-key (kbd "<f5>") 'revert-buffer)

    (use-package aggressive-indent 
      :ensure t
      :config
      ;; (global-aggressive-indent-mode 1)
      ;;(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
      )


    (use-package ace-window
      :ensure t
      :config
      (setq aw-scope 'frame) ;; was global
      (global-set-key (kbd "C-x O") 'other-frame)
      (global-set-key [remap other-window] 'ace-window))
  #+END_SRC

#+BEGIN_SRC emacs-lisp

(use-package try :ensure t)
(use-package posframe :ensure t)
 (use-package iedit
  :ensure t)
 
    (use-package which-key
      :ensure t 
      :config
      (which-key-mode))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package pcre2el
:ensure t
:config 
(pcre-mode)
)

(add-hook 'org-mode-hook 'turn-on-flyspell)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
(add-hook 'mu4e-compose-mode-hook 'turn-on-flyspell)
(add-hook 'mu4e-compose-mode-hook 'turn-on-auto-fill)


#+END_SRC

#+BEGIN_SRC emacs-lisp 
  ;; (use-package hlinum
  ;; :ensure t
  ;; :config
  ;; (hlinum-activate)
  ;; (global-linum-mode)

  ;; )
#+END_SRC
* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp
  



   (use-package counsel
:ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))




  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))


  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
	 ("C-r" . swiper-isearch)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
  #+END_SRC

* buffer stuff

#+begin_src emacs-lisp
(use-package bufler :ensure t)
(defun mz/bufler-one-window (&optional force-refresh)
  (interactive "P")
  (bufler-list)
  (delete-other-windows)

)

(global-set-key (kbd "C-x C-b") 'mz/bufler-one-window)

#+end_src

#+BEGIN_SRC emacs-lisp  :tangle no

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("magit" (mode . magit-mode))
                 ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                 ("mu4e" (or

                          (mode . mu4e-compose-mode)
                          (name . "\*mu4e\*")
                          ))
                 ("programming" (or
                                 (mode . clojure-mode)
                                 (mode . clojurescript-mode)
                                 (mode . python-mode)
                                 (mode . c++-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))
                 ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; don't show these
                                          ;(add-to-list 'ibuffer-never-show-predicates "zowie")
  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)

#+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC


* Multiple Cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
:ensure t
)

(defhydra hydra-multiple-cursors (:hint nil)
  "
 Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
------------------------------------------------------------------
 [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
 [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
 [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
 [Click] Cursor at point       [_q_] Quit"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("s" mc/mark-all-in-region-regexp :exit t)
  ("0" mc/insert-numbers :exit t)
  ("A" mc/insert-letters :exit t)
  ("<mouse-1>" mc/add-cursor-on-click)
  ;; Help with click recognition in this hydra
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore)
  ("q" nil))


#+END_SRC
* focus mode
#+BEGIN_SRC emacs-lisp
(use-package focus
:ensure t
)
#+END_SRC
* ivy-rich
#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
:ensure t
:config
(ivy-rich-mode 1)
)
#+END_SRC
* eshell
#+BEGIN_SRC emacs-lisp

(use-package exec-path-from-shell
  :ensure t
  :config
  (exec-path-from-shell-initialize))


    (use-package fish-completion
    :ensure t
    :config
    (global-fish-completion-mode))
  ;; (use-package eshell-prompt-extras 
  ;; :ensure t
  ;; :config
  ;; (setq epe-show-python-info nil)
  ;; )

  (use-package eshell-git-prompt
  :ensure t
  :config
  (eshell-git-prompt-use-theme 'git-radar)
  )


  (setq scroll-step 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
  (defun select-or-create (arg)
    "Commentary ARG."
    (if (string= arg "New eshell")
        (eshell t)
      (switch-to-buffer arg)))
  (defun eshell-switcher (&optional arg)
    "Commentary ARG."
    (interactive)
    (let* (
           (buffers (cl-remove-if-not (lambda (n) (eq (buffer-local-value 'major-mode n) 'eshell-mode)) (buffer-list)) )
           (names (mapcar (lambda (n) (buffer-name n)) buffers))
           (num-buffers (length buffers) )
           (in-eshellp (eq major-mode 'eshell-mode)))
      (cond ((eq num-buffers 0) (eshell (or arg t)))
            ((not in-eshellp) (switch-to-buffer (car buffers)))
            (t (select-or-create (completing-read "Select Shell:" (cons "New eshell" names)))))))



(defun eshell/in-term (prog &rest args)
  "Run shell command in term buffer."
  (switch-to-buffer (apply #'make-term prog prog nil args))
  (term-mode)
  (term-char-mode))


#+END_SRC
* personal keymap
#+BEGIN_SRC emacs-lisp
;; unset C- and M- digit keys
;(dotimes (n 10)
;  (global-unset-key (kbd (format C-%d"" n)))
;  (global-unset-key (kbd (format "M-%d" n)))
;  )


(defun org-agenda-show-agenda-and-todo (&optional arg)
  (interactive "P")
  (org-agenda arg "c")
  (org-agenda-fortnight-view))

(defun z/load-iorg ()
(interactive )
(find-file "~/Sync/orgfiles/i.org"))

;; set up my own map
(define-prefix-command 'z-map)
(global-set-key (kbd "C-z") 'z-map) ;; was C-1
(define-key z-map (kbd "k") 'compile)
(define-key z-map (kbd "c") 'hydra-multiple-cursors/body)
(define-key z-map (kbd "f") 'hydra-origami/body)
(define-key z-map (kbd "m") 'mu4e)
(define-key z-map (kbd "1") 'org-global-cycle)
(define-key z-map (kbd "a") 'org-agenda-show-agenda-and-todo)
(define-key z-map (kbd "g") 'counsel-ag)
(define-key z-map (kbd "2") 'make-frame-command)
(define-key z-map (kbd "0") 'delete-frame)
(define-key z-map (kbd "o") 'other-frame)

(define-key z-map (kbd "s") 'flyspell-correct-word-before-point)
(define-key z-map (kbd "i") 'z/load-iorg)
(define-key z-map (kbd "*") 'calc)
(define-key z-map (kbd "e") 'eshell-switcher)

  (setq user-full-name "Mike Zamansky"
                          user-mail-address "mz631@hunter.cuny.edu")
  ;;--------------------------------------------------------------------------


  (global-set-key (kbd "\e\ei")
                  (lambda () (interactive) (find-file "~/Sync/orgfiles/i.org")))

  (global-set-key (kbd "\e\el")
                  (lambda () (interactive) (find-file "~/Sync/orgfiles/links.org")))

  (global-set-key (kbd "\e\ec")
                  (lambda () (interactive) (find-file "~/.emacs.d/README.org")))

(global-set-key (kbd "<end>") 'move-end-of-line)

(global-set-key [mouse-3] 'flyspell-correct-word-before-point)

#+END_SRC

#+RESULTS:
: origami-toggle-node

#  LocalWords:  DIRED Javascript Screencasts Autocomplete
* Elfeed
#+BEGIN_SRC emacs-lisp
   (setq elfeed-db-directory "~/Sync/shared/elfeeddb")

  (defun mz/elfeed-browse-url (&optional use-generic-p)
    "Visit the current entry in your browser using `browse-url'.
  If there is a prefix argument, visit the current entry in the
  browser defined by `browse-url-generic-program'."
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               do (if use-generic-p
                      (browse-url-generic (elfeed-entry-link entry))
                    (browse-url (elfeed-entry-link entry))))
      (mapc #'elfeed-search-update-entry entries)
      (unless (or elfeed-search-remain-on-entry (use-region-p))
      ;;(forward-line)
)))



      (defun elfeed-mark-all-as-read ()
            (interactive)
            (mark-whole-buffer)
            (elfeed-search-untag-all-unread))


      ;;functions to support syncing .elfeed between machines
      ;;makes sure elfeed reads index from disk before launching
      (defun bjm/elfeed-load-db-and-open ()
        "Wrapper to load the elfeed db from disk before opening"
        (interactive)
        (elfeed-db-load)
        (elfeed)
        (elfeed-search-update--force))

      ;;write to disk when quiting
      (defun bjm/elfeed-save-db-and-bury ()
        "Wrapper to save the elfeed db to disk before burying buffer"
        (interactive)
        (elfeed-db-save)
        (quit-window))




      (use-package elfeed
        :ensure t
        :bind (:map elfeed-search-mode-map
                    ("q" . bjm/elfeed-save-db-and-bury)
                    ("Q" . bjm/elfeed-save-db-and-bury)
                    ("m" . elfeed-toggle-star)
                    ("M" . elfeed-toggle-star)
                    ("j" . mz/make-and-run-elfeed-hydra)
                    ("J" . mz/make-and-run-elfeed-hydra)
                    ("b" . mz/elfeed-browse-url)
                    ("B" . elfeed-search-browse-url)
                    )
  :config
      (defalias 'elfeed-toggle-star
        (elfeed-expose #'elfeed-search-toggle-all 'star))

        )

      (use-package elfeed-goodies
        :ensure t
        :config
        (elfeed-goodies/setup))


      (use-package elfeed-org
        :ensure t
        :config
        (elfeed-org)
        (setq rmh-elfeed-org-files (list "~/Sync/shared/elfeed.org")))





    (defun z/hasCap (s) ""
           (let ((case-fold-search nil))
           (string-match-p "[[:upper:]]" s)
           ))


    (defun z/get-hydra-option-key (s)
      "returns single upper case letter (converted to lower) or first"
      (interactive)
      (let ( (loc (z/hasCap s)))
        (if loc
            (downcase (substring s loc (+ loc 1)))
          (substring s 0 1)
        )))

    ;;  (active blogs cs eDucation emacs local misc sports star tech unread webcomics)
    (defun mz/make-elfeed-cats (tags)
      "Returns a list of lists. Each one is line for the hydra configuratio in the form
         (c function hint)"
      (interactive)
      (mapcar (lambda (tag)
                (let* (
                       (tagstring (symbol-name tag))
                       (c (z/get-hydra-option-key tagstring))
                       )
                  (list c (append '(elfeed-search-set-filter) (list (format "@6-months-ago +%s" tagstring) ))tagstring  )))
              tags))




  
    (defmacro mz/make-elfeed-hydra ()
      `(defhydra mz/hydra-elfeed ()
         "filter"
         ,@(mz/make-elfeed-cats (elfeed-db-get-all-tags))
         ("*" (elfeed-search-set-filter "@6-months-ago +star") "Starred")
         ("M" elfeed-toggle-star "Mark")
         ("A" (elfeed-search-set-filter "@6-months-ago") "All")
         ("T" (elfeed-search-set-filter "@1-day-ago") "Today")
         ("Q" bjm/elfeed-save-db-and-bury "Quit Elfeed" :color blue)
         ("q" nil "quit" :color blue)
         ))




      (defun mz/make-and-run-elfeed-hydra ()
        ""
        (interactive)
        (mz/make-elfeed-hydra)
        (mz/hydra-elfeed/body))


  (defun my-elfeed-tag-sort (a b)
    (let* ((a-tags (format "%s" (elfeed-entry-tags a)))
           (b-tags (format "%s" (elfeed-entry-tags b))))
      (if (string= a-tags b-tags)
          (< (elfeed-entry-date b) (elfeed-entry-date a)))
      (string< a-tags b-tags)))


  (setf elfeed-search-sort-function #'my-elfeed-tag-sort)
#+END_SRC
* Name frame
#+BEGIN_SRC emacs-lisp
(use-package nameframe
  :ensure t)

(use-package nameframe-projectile
  :ensure t
  :config
  (nameframe-projectile-mode t)

  )


#+END_SRC
* dired stuff
#+BEGIN_SRC emacs-lisp
(use-package diredfl
:ensure t
:config 
(diredfl-global-mode 1))

(setq 
dired-listing-switches "-lXGh --group-directories-first"
dired-dwim-target t)
(add-hook 'dired-mode-hook 'dired-hide-details-mode)



(use-package dired-recent
  :ensure t
  :config
  
  (dired-recent-mode  1)
  )


(defun my-dired-recent-dirs ()
  "Present a list of recently used directories and open the selected one in dired"
  (interactive)
  (let ((dir (ivy-read "Directory: "
                       dired-recent-directories
                       :re-builder #'ivy--regex
                       :sort nil
                       :initial-input nil)))
    (dired dir)))


#+END_SRC
** floobits
#+begin_src emacs-lisp
(use-package floobits :ensure t)
#+end_src
* RG - ripgrep
#+begin_src emacs-lisp
(use-package rg
:ensure t
:config
(rg-enable-default-bindings))
;;(rg-enable-menu))
#+end_src
* Perspective mode
#+begin_src emacs-lisp
  (use-package perspective
    :ensure t
    :config
    (persp-mode))
#+end_src
* keypression
#+begin_src emacs-lisp
(use-package keypression :ensure t)
#+end_src

* open alternative from Xah Lee
#+begin_src emacs-lisp
(defun xah-open-in-external-app (&optional @fname)
  "Open the current file or dired marked files in external app.
The app is chosen from your OS's preference.

When called in emacs lisp, if @fname is given, open that.

URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2019-11-04"
  (interactive)
  (let* (
         ($file-list
          (if @fname
              (progn (list @fname))
            (if (string-equal major-mode "dired-mode")
                (dired-get-marked-files)
              (list (buffer-file-name)))))
         ($do-it-p (if (<= (length $file-list) 5)
                       t
                     (y-or-n-p "Open more than 5 files? "))))
    (when $do-it-p
      (cond
       ((string-equal system-type "windows-nt")
        (mapc
         (lambda ($fpath)
           (w32-shell-execute "open" $fpath)) $file-list))
       ((string-equal system-type "darwin")
        (mapc
         (lambda ($fpath)
           (shell-command
            (concat "open " (shell-quote-argument $fpath))))  $file-list))
       ((string-equal system-type "gnu/linux")
        (mapc
         (lambda ($fpath) (let ((process-connection-type nil))
                            (start-process "" nil "xdg-open" $fpath))) $file-list))))))

(define-key dired-mode-map (kbd "C-<return>") 'xah-open-in-external-app)
#+end_src
* misc
#+begin_src emacs-lisp
(setq confirm-kill-processes nil)


#+end_src
* eglot - C++, Python, Java
#+begin_src emacs-lisp
(use-package eglot :ensure t)
(add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd-10"))
(add-hook 'c-mode-hook 'eglot-ensure)
(add-hook 'c++-mode-hook 'eglot-ensure)

;; set the python interpeter
;;(setq python-shell-interpreter "python3")
(add-hook 'python-mode-hook 'eglot-ensure)


(defconst my-eclipse-jdt-home "/home/zamansky/.emacs.d/.cache/lsp/eclipse.jdt.ls/plugins/org.eclipse.equinox.launcher_1.5.800.v20200727-1323.jar")
(defun my-eglot-eclipse-jdt-contact (interactive)
  "Contact with the jdt server input INTERACTIVE."
  (let ((cp (getenv "CLASSPATH")))
    (setenv "CLASSPATH" (concat cp ":" my-eclipse-jdt-home))
    (unwind-protect (eglot--eclipse-jdt-contact nil)
      (setenv "CLASSPATH" cp))))
(setcdr (assq 'java-mode eglot-server-programs) #'my-eglot-eclipse-jdt-contact)


(add-hook 'java-mode-hook 'eglot-ensure)

#+end_src
